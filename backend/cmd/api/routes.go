package main

import (
	"embed"
	"io/fs"
	"log"
	"net/http"
	"path/filepath"

	"github.com/go-chi/chi/v5"
	chiMW "github.com/go-chi/chi/v5/middleware"
	"github.com/randallmlough/code-bot/internal/response"
)

func (app *application) routes() http.Handler {
	r := chi.NewRouter()
	r.Use(app.recoverPanic)
	r.Use(app.securityHeaders)
	r.Use(chiMW.RequestID)
	r.Use(chiMW.RealIP)
	r.Use(chiMW.Logger)

	r.Mount("/api", app.APIRoutes())

	r.Mount("/", embeddedFileServer("dist"))
	return r
}

func (app *application) APIRoutes() http.Handler {
	r := chi.NewRouter()

	r.NotFound(app.notFound)
	r.MethodNotAllowed(app.methodNotAllowed)

	// resource RegisterRoutes
	r.Get("/health", func(w http.ResponseWriter, r *http.Request) {
		if err := response.JSON(w, http.StatusOK, response.Envelope{
			"message": "available",
		}); err != nil {
			app.serverError(w, r, err)
		}
	})
	r.Post("/convert", app.convert)

	return r
}

var frontendFiles embed.FS

func embeddedFileServer(dir string) http.Handler {
	// Root at the `dist` folder generated by the Next.js frontend.
	distFS, err := fs.Sub(frontendFiles, dir)
	if err != nil {
		log.Fatal(err)
	}

	fileSystem := http.FS(distFS)
	fileServer := http.FileServer(fileSystem)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch {
		case r.URL.Path == "/":
			fileServer.ServeHTTP(w, r)
		case filepath.Ext(r.URL.Path) == "": // check whether the request is for a file or a path
			r.URL.Path += ".html"
			fileServer.ServeHTTP(w, r)
		default:
			fileServer.ServeHTTP(w, r)
		}
	})
}
